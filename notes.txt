


package.json: npm config file: dependencies(prod, dev), scripts, project details(name, version)
tsconfig.json: Typescript compiler config
next.config.mjs: Next.js config file: customize the nextjs frameworks
eslintrc.json: eslint config

src: optional folder for source code
public: any static content(css, images, icon)
node_modules: all installed dependencies


routing
	Nextjs there are 2 routing mechansims
		app router: latest, app folder
		pages router: legacy, pages folder
		
app router
	layout.tsx: This is the root component, defines the application layout
	page.tsx: the page to be displayed on the root(home) route(http://localhost:3001/)
	
props
	A way to paramertize a component
	props is always an object
	In Typescript we define the structure on the props: type, interface, class
	
	<Message text="abc"/>
	
	<Message text="abc">
		<p>xyz</p>
	</Message>
	
	function Message(props){
	function Message({text, children}){
	
		props.text ==> "abc"
		props.children ==> <p>xyz</p>
	}
	
event handling
	html
		<button onclick="foo();"></button>
	react
		<button onClick={foo}></button>
		
components in Nextjs 13 onwards(App Router)
	All components are server components by default
	To create a client component use a directive call 'use client'
	If interactivity(handle events on the client), access browser features(localstorage, window, document), use any of the hooks
		-create client components
		
useState:
	This a function:
		Takes the initial value
		Returns is an array with 2 elements: First element is a variable that holds the state,
		Seconf element is a function to update the state
	State updates are asynchronous
	State updates are batched
		 counter: 5 => setCounter(counter + 1); => setCounter(6);
		 counter: 5 => setCounter(counter + 1); => setCounter(6);
	setState method: change/update the state
		Two overloads
			setState(updatedValue)
			setState(callback) => callback (prevValue) => {return the updatedValue}
			
			 counter: 5 => setCounter(pCounter => pCounter + 1);; => setCounter(invoke the callback);
			counter: 5 => setCounter(pCounter => pCounter + 1); => setCounter(invoke the callback);
	state should always be treated as immutable, to change the state, create a copy of the current state, make changes to the copy 
	and then update the copy using the setState method
	


Form fields
	Controlled input : useState hook, value and the onChange/onSelect/onChecked event
	Uncontrolled input: useRef hook
	
useRef
	Hook that a returns a mutable reference
	Used to reference to any HTML element: access the propertiens and functions the element
	
useEffect
	useEffect(callback, [list of dependencies])
	Whenever the dependencies change the callback in invoked
	
	mount : useEffect(callback, [empty dependencies])
		A logic when the component loaded/mounted. 
		DOM initialization
		A api call to fetch data/ any other task
		register any event handlers, 
		start timers
	update : 
	unmouted: callback returned form the useEffect 
		Clean-up: Cancel an api call, unregister any event handlers, cancel timers
		
API calls
	Browser: XMLHttpRequest(xhr) and fetch api(HTML5)
	XMLHttpRequest: low level
	
	axios: open source library
	fetch: W3C 
	
	promise object
		To handle a promise use the "then" method
		Another way to handle a promise is to use the async/await 
	async/await
		simplifies the api calls
		async calls will look synchrous calls
	status
		100 - Information
		200 - 200, 201 -- success
		300 - Redirect
		
		400 - 400,401, 403,404 - client error
		500 - 500, 503 - server error
		
css
	class attribute ==> css classes
	style attribute  ==> css 
	
	
Excercise/Assignment: Complete the EditProductPage
	1. Populate the data into the input fields
		GET http://localhost:9000/products/{id}
	2. Bindings of the state to the input fields (value, onChange)
	3. Handle the save and cancel event
	4. Save to the backend
		PUT http://localhost:9000/products/{id} => product
	5. Navigate back to products on cancel.


State on the client-side
		localstorage: persistent store provided bythe browser
		sessionStorage: non-persistent store by the browser
		
		Redux, react context: application memory
		
Redux
	store: place where the data is stored(in memory)
	action: an object. 
				{type: "update_access_token", token: "abc"}
				{type: "clear_token"}
	dispatch: sending(to the reducer) an action to be processed
	reducer: function that receives the action, process the action and if needed updates the store
	subscriber: will be notified of changes in the store.
	
	libraries: redux, react-redux, @reduxjs/toolkit
	npm install @reduxjs/toolkit react-redux
	
	react-redux: Integrates redux with react
		-Provider
		- useDispatch : returns a dispatch method
		- useSelector : returns the state(redux)
		- useStore: return the store
		
	Action creators: Design pattern-a function that creates the action.
	Middleware: logging, validation
	Async operations: 
		- reducer has to be synchronous
		- use middleware for the async operations
		- libraries : redux thunk, redux saga
		
	@reduxjs/toolkit
		- Automatically creates the action creators
		- Allows us to write code treating the state as mutable
		- simplifies the async middleware usage
		- lots helpers methods: reducres, slices
	redux persist
		retain the data across session,save to the localstorage
		
React context
	use cases are same as that of redux
	context is a low level api.
	useContext - access context in a component
	
	In redux we have one store, mutiple reducers
	In context we can create mutiple context
	
	When using the context, on updating the context we have ensure the UI rerender(state/props)
	
Assignment
	
	The replcate the gadget & view-cart using react context.
	To rerender the UI: useState, useReducer
	
Optimization & Design
	
	1. Is to create smaller components. optimize, test
	2. React.memo: Memoization, creates a copy(cache) of the component, and resues the copy.
					It rerenders the component if the component's state or props change.
	3. useCallback: memoized copy of a callback(passes as a prop to component).
	4. useMemo: memoized copy of a value.
	5. Virtaul DOM.
	6. Reuse: 
		Higher-order component(HOC) - functions that return a component and provides some feature/behavior
		Custom Hooks: limited to functional components
	7. Custom Hooks: Reuse some behavior implemented using one or more hooks.
	8. HOC: Component composition
	
ListProduct(client)
	-request is to fetch the page(static html/css/...)
	-render the component to the browser
	- request to fetch the products(useEffect => mount)
	- products updated to the ui(excutes some js)
	
	
ListCustomers(server)
	--request is to fetch the page(static html/css/...)
		-reaches the server	
		-invokes the js in the component	
				-- invokes an API
				--return is JSX
		- JSX is converted HTML
	-response from the server is the generated HTML(no js)
	
	
Server Components
	- Session specific data on the server(accessToken)
		- Redis cache, temp db
		
	- SSR
		1. disable the cache:  const response = await fetch(url, {cache: 'no-store'});
		2. dynamic paramerters
		3. Always use a non-get(post)
		
Nodejs
	- Building javascript application on the server
	- API layer or Web application : Node Express, Nextjs
	
		
	

	

	
	
		
		
	
	
	
	